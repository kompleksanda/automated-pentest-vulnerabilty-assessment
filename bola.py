import autogen

config_list = [{'model': 'gpt-3.5-turbo-0125', 'api_key': ''},]

llm_config = {"config_list": config_list, "cache_seed": 42}

penetration_tester = autogen.AssistantAgent(
    name="Penetration_tester",
    llm_config=llm_config,
    system_message="""
        You are a professional penetration tester. Do not assume anything. You have access to kali command line. Always identify the language of the code or command you write in the format:
        ```<lang>
        <codes/command>
        ```
        All bash command must have bash as lang
        if it is not a command or code do not wrap in ```
        Do not use placeholder like <placehoolder> in your command/code, rather, get the value of the placeholder before it is used
        Write only one chunk of codes/commands at a time do not put more that one instance of ```
        write TERMINATE when done (Do not append it). Do not TERMINATE on error terminate only when the task is done
        """,
)
report_writer = autogen.AssistantAgent(
    name="Vulnerability_Report_writer",
    llm_config=llm_config,
    system_message="""
        You are a professional vulnerabillity report writer, known for
        your insightful vulnerability reports.
        """,
)

user_proxy_auto = autogen.UserProxyAgent(
    name="User_Proxy_Auto",
    human_input_mode="NEVER",
    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().upper().endswith("TERMINATE"),
    code_execution_config={
        "last_n_messages": 1,
        "work_dir": "tasks",
        "use_docker": False,
    }
)

user_proxy = autogen.UserProxyAgent(
    name="User_Proxy",
    human_input_mode="ALWAYS",  # ask human for input at each step
    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().upper().endswith("TERMINATE"),
    code_execution_config={
        "last_n_messages": 1,
        "work_dir": "tasks",
        "use_docker": False,
    }
)

penetration_tasks = [
    """Do an simple nmap (no scripts) scan to discover open ports hosting an API on the 127.0.0.1. Send http request to identify the content
    and observe the response to confirm the API port. Exclude port 5001.""",
    
    """After identifying the API port, read and understand this documentation for available endpoints in OAS3 /openapi.json OpenAPI v3 specs for VAmPI """,
    
    """Identify excessive data exposure and evaluate to see interesting findings (look for information that helps with admin privilege role). Try as much as posible to not be stuck on a task. Have the end in mind""",
    
    """Conduct a mass assignment penetration test by creating an admin user, "newadmin". Do not be stuck on a task. Have the end in mind""",
    
    """Conduct a broken level object authentication between two user accounts (create them, one is "alex" the other is "seun")"""
]

writing_tasks = ["""Develop an insightful penetration test report using the information provided."""]

chat_results = autogen.initiate_chats(
    [
        {
            "sender": user_proxy_auto,
            "recipient": penetration_tester,
            "message": penetration_tasks[0],
            "clear_history": True,
            "silent": False,
            "max_turn":2,
            "summary_method": "reflection_with_llm",
            "summary_args" : {
            	"summary_prompt": "Summarise the port found with the that API runs on it.",
            },
        },
        {
            "sender": user_proxy_auto,
            "recipient": penetration_tester,
            "message": penetration_tasks[1],
            "clear_history": True,
            "silent": True,
            "max_turn":2,
            "summary_method": "reflection_with_llm",
            "summary_args" : {
            	"summary_prompt": "Summarise a list all the endpoints, what they are used for and how they can be used (with their parameter and requestbody",
            },
        },
        {
            "sender": user_proxy_auto,
            "recipient": penetration_tester,
            "message": penetration_tasks[2],
            "clear_history": True,
            "silent": False,
            "max_turn":2,
            "summary_method": "reflection_with_llm",
            "summary_args" : {
            	"summary_prompt": "Summarise a interesting findings. Make sure to note in the summary all the admin profile attributes that stands out",
            },
        },
        {
            "sender": user_proxy_auto,
            "recipient": penetration_tester,
            "message": penetration_tasks[3],
            "clear_history": True,
            "silent": False,
            "max_turn":2,
            "summary_method": "reflection_with_llm",
            "summary_args" : {
            	"summary_prompt": "Do not summarise",
            },
            "carryover": """when you query the http://localhost:5000/users/v1/_debug. The admin profile is return like this
			    {
			      "admin": true,
			      "email": "admin@mail.com",
			      "password": "pass1",
			      "username": "admin"
			    }
 			"""
        },
        {
            "sender": user_proxy_auto,
            "recipient": penetration_tester,
            "message": penetration_tasks[4],
            "clear_history": True,
            "silent": False,
            "max_turn":2,
            "summary_method": "reflection_with_llm",
        },
        {
            "sender": user_proxy,
            "recipient": report_writer,
            "message": writing_tasks[0]
        },
    ]
)
